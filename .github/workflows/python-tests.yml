name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests with coverage
      run: |
        # Run all tests except performance tests and generate coverage
        pytest tests/unit tests/integration tests/functional -v --cov=src --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        flags: unittests
        name: codecov-umbrella
        verbose: true
    
    - name: Check coverage thresholds
      run: |
        # Check coverage thresholds for core components (high risk)
        pytest --cov=src/infrastructure/external_services --cov=src/application/use_cases --cov=src/application/services --cov=src/infrastructure/repositories --cov=src/infrastructure/cache --cov-fail-under=85

        # Check coverage thresholds for support components (medium risk)
        pytest --cov=src/presentation/cli --cov=src/presentation/reporters --cov=src/infrastructure/utils --cov-fail-under=75

        # Check overall coverage threshold
        pytest --cov=src --cov-fail-under=70

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src --count --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check import sorting
      run: |
        isort --check-only --profile black src
    
    - name: Security check with bandit
      run: |
        bandit -r src -ll

  performance:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run performance tests (except MongoDB tests)
      run: |
        pytest tests/performance -v -k "not mongodb"
    
    - name: Performance test summary
      run: |
        echo "Performance tests completed successfully"
        echo "For detailed performance metrics, check the test logs above"

  publish-docs:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Build documentation
      run: |
        # Copy markdown files to docs directory
        mkdir -p docs
        cp *.md docs/
        
        # Create API documentation from source
        mkdir -p docs/api
        
        # Configure MkDocs
        echo "site_name: Zendesk AI Integration" > mkdocs.yml
        echo "theme: material" >> mkdocs.yml
        echo "plugins:" >> mkdocs.yml
        echo "  - search" >> mkdocs.yml
        echo "  - mkdocstrings:" >> mkdocs.yml
        echo "      handlers:" >> mkdocs.yml
        echo "        python:" >> mkdocs.yml
        echo "          selection:" >> mkdocs.yml
        echo "            docstring_style: google" >> mkdocs.yml
        
        # Add navigation
        echo "nav:" >> mkdocs.yml
        echo "  - Home: index.md" >> mkdocs.yml
        echo "  - Usage: README.md" >> mkdocs.yml
        echo "  - Testing: TESTING.md" >> mkdocs.yml
        echo "  - Contributing: CONTRIBUTING.md" >> mkdocs.yml
        echo "  - Features:" >> mkdocs.yml
        echo "    - Sentiment Analysis: SENTIMENT_ANALYSIS.md" >> mkdocs.yml
        echo "    - Multi-View: MULTI_VIEW_REPORTING.md" >> mkdocs.yml
        echo "    - Enhanced Reports: ENHANCED_REPORTS.md" >> mkdocs.yml
        echo "    - Performance: PERFORMANCE_OPTIMIZATION.md" >> mkdocs.yml
        
        # Build the documentation site
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

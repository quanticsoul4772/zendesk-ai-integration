#!/usr/bin/env python
"""
Script to improve HTML formatting of hardware reports.

This script adds modern styling, visual components, and responsive design to
the output HTML reports generated by the Zendesk AI integration tool.
"""

import os
import sys
import re
from datetime import datetime

def improve_html_report_formatting(input_file, output_file=None):
    """
    Improve the formatting of an existing HTML hardware report.
    
    Args:
        input_file: Path to the input HTML file
        output_file: Path to save the improved HTML file (if None, overwrites the input)
    """
    if output_file is None:
        output_file = input_file
    
    # Read the input file
    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Add modern CSS styling with responsive design
    css = """
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
            background-color: #f5f7fa;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
            margin-top: 0;
        }
        h2 {
            color: #2980b9;
            margin-top: 30px;
            padding-bottom: 8px;
            border-bottom: 1px solid #eee;
        }
        h3 {
            color: #3498db;
            margin-top: 25px;
        }
        .meta-info {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 25px;
            border-left: 4px solid #3498db;
        }
        .component-distribution {
            margin-bottom: 30px;
        }
        .component-bar {
            display: flex;
            margin-bottom: 12px;
            align-items: center;
        }
        .component-name {
            width: 150px;
            font-weight: bold;
        }
        .component-count {
            width: 120px;
            text-align: right;
            padding-right: 15px;
        }
        .bar-container {
            flex-grow: 1;
            background-color: #ecf0f1;
            height: 24px;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
        }
        .bar {
            height: 100%;
            transition: width 0.8s ease;
        }
        .tickets-list {
            border: 1px solid #eee;
            border-radius: 6px;
            overflow: hidden;
            margin-top: 20px;
        }
        .ticket {
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        .ticket:last-child {
            border-bottom: none;
        }
        .ticket:hover {
            background-color: #f9f9f9;
        }
        .ticket-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .ticket-id {
            font-weight: bold;
            color: #3498db;
        }
        .ticket-status {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.85em;
            color: white;
            background-color: #95a5a6;
        }
        .ticket-status.open {
            background-color: #2ecc71;
        }
        .ticket-status.pending {
            background-color: #f39c12;
        }
        .ticket-subject {
            margin-bottom: 5px;
        }
        .ticket-meta {
            color: #7f8c8d;
            font-size: 0.9em;
        }
        .component-legend {
            display: flex;
            flex-wrap: wrap;
            margin: 20px 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 6px;
        }
        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 20px;
            margin-bottom: 10px;
        }
        .legend-color {
            width: 20px;
            height: 20px;
            margin-right: 8px;
            border-radius: 3px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        .view-section {
            background-color: #f8f9fa;
            border-radius: 6px;
            padding: 20px;
            margin-bottom: 30px;
            border-left: 5px solid #3498db;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        .view-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .view-count {
            background-color: #3498db;
            color: white;
            padding: 3px 10px;
            border-radius: 12px;
            font-size: 0.9em;
        }
        .summary {
            background-color: #e8f4f8;
            padding: 20px;
            border-radius: 6px;
            margin-top: 30px;
            border-left: 4px solid #2980b9;
        }
        
        /* Component color classes */
        .component-unknown { background-color: #95a5a6; }
        .component-gpu { background-color: #e74c3c; }
        .component-cpu { background-color: #2ecc71; }
        .component-memory { background-color: #f39c12; }
        .component-drive { background-color: #9b59b6; }
        .component-power_supply { background-color: #1abc9c; }
        .component-motherboard { background-color: #34495e; color: white; }
        .component-cooling { background-color: #3498db; }
        .component-network { background-color: #e67e22; }
        .component-other { background-color: #7f8c8d; }
        
        @media (max-width: 768px) {
            .component-bar {
                flex-direction: column;
                align-items: flex-start;
                margin-bottom: 20px;
            }
            .component-name, .component-count {
                width: 100%;
                text-align: left;
                padding-right: 0;
                margin-bottom: 5px;
            }
            .bar-container {
                width: 100%;
            }
        }
    </style>
    """
    
    # Insert container div
    if "<body>" in content:
        content = content.replace("<body>", "<body>\n<div class=\"container\">")
        content = content.replace("</body>", "</div>\n</body>")
    
    # Add the CSS after the head tag
    if "</head>" in content:
        content = content.replace("</head>", f"{css}\n</head>")
    else:
        # If there's no head tag, add one
        content = f"<!DOCTYPE html>\n<html>\n<head>\n<title>Hardware Report</title>\n{css}\n</head>\n<body>\n<div class=\"container\">" + content + "</div>\n</body>\n</html>"
    
    # Add component legend
    legend_html = """
    <div class="component-legend">
        <div class="legend-item"><div class="legend-color component-gpu"></div> GPU</div>
        <div class="legend-item"><div class="legend-color component-cpu"></div> CPU</div>
        <div class="legend-item"><div class="legend-color component-memory"></div> Memory</div>
        <div class="legend-item"><div class="legend-color component-drive"></div> Drive</div>
        <div class="legend-item"><div class="legend-color component-power_supply"></div> Power Supply</div>
        <div class="legend-item"><div class="legend-color component-motherboard"></div> Motherboard</div>
        <div class="legend-item"><div class="legend-color component-cooling"></div> Cooling</div>
        <div class="legend-item"><div class="legend-color component-network"></div> Network</div>
        <div class="legend-item"><div class="legend-color component-other"></div> Other</div>
        <div class="legend-item"><div class="legend-color component-unknown"></div> Unknown</div>
    </div>
    """
    
    # Add legend after any h2 that contains "Component Distribution"
    content = re.sub(r'(<h2[^>]*>.*Component Distribution.*</h2>)', r'\1' + legend_html, content)
    
    # Transform component listings into visual bars
    def component_transform(match):
        component = match.group(1).lower()
        count = match.group(2)
        percentage = match.group(3)
        return f"""<div class="component-bar">
            <div class="component-name">{component.capitalize()}</div>
            <div class="component-count">{count} ({percentage}%)</div>
            <div class="bar-container">
                <div class="bar component-{component}" style="width: {percentage}%"></div>
            </div>
        </div>"""
    
    # Find and replace component listings
    content = re.sub(r'- ([A-Za-z_]+): (\d+) \(([0-9.]+)%\)', component_transform, content)
    
    # Improve ticket listings
    def ticket_transform(match):
        ticket_id = match.group(1)
        subject = match.group(2)
        status = match.group(3).lower() if match.group(3) else "unknown"
        date = match.group(4) if match.group(4) else ""
        
        status_class = "open" if status in ["open", "new"] else "pending" if status == "pending" else ""
        
        return f"""<div class="ticket">
            <div class="ticket-header">
                <div class="ticket-id">Ticket {ticket_id}</div>
                <div class="ticket-status {status_class}">{status.capitalize()}</div>
            </div>
            <div class="ticket-subject">{subject}</div>
            <div class="ticket-meta">Created: {date}</div>
        </div>"""
    
    # Find and replace ticket listings
    content = re.sub(r'Ticket (\d+): (.*)\s+Status: ([^,]+), Created: (.*)', ticket_transform, content)
    
    # Wrap any ticket sections in a tickets-list div
    if "Recent Open Tickets" in content:
        content = re.sub(r'<h2>Recent Open Tickets</h2>(.*?)<h2>', r'<h2>Recent Open Tickets</h2><div class="tickets-list">\1</div><h2>', content, flags=re.DOTALL)
    
    # Write the improved content to the output file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Improved HTML report saved to {output_file}")
    return True

def main():
    """Main function to process command line arguments."""
    # Check if filename is provided
    if len(sys.argv) < 2:
        print("Usage: python improve_html_report.py <input_file> [output_file]")
        return 1
    
    input_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else None
    
    try:
        improve_html_report_formatting(input_file, output_file)
        return 0
    except Exception as e:
        print(f"Error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
